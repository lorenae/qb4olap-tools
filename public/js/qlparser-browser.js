(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.qljs = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (process){
/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[7,15],$V1=[1,10],$V2=[6,10],$V3=[1,34],$V4=[1,37],$V5=[1,35],$V6=[1,36],$V7=[13,23,25,69,106,107,108,109,110,111,113,114,120,121,122],$V8=[1,51],$V9=[21,41,47,51],$Va=[2,89],$Vb=[1,79],$Vc=[1,80],$Vd=[13,23,25,113,114],$Ve=[10,16,17,21,47,71,74,76,77,78,81,82,84,86,89,91,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,123,124,125,126,127],$Vf=[2,117],$Vg=[1,109],$Vh=[1,110],$Vi=[1,111],$Vj=[10,16,17,21,47,68,69,71,74,76,77,78,81,82,84,86,89,91,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,120,123,124,125,126,127],$Vk=[1,116],$Vl=[1,117],$Vm=[1,118],$Vn=[1,121],$Vo=[1,122],$Vp=[1,123],$Vq=[1,124],$Vr=[1,125],$Vs=[1,126],$Vt=[1,127],$Vu=[1,128],$Vv=[1,129],$Vw=[1,130],$Vx=[1,131],$Vy=[1,132],$Vz=[16,17,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112],$VA=[13,23,25,69,106,107,108,109,110,111,113,114,120],$VB=[1,141],$VC=[1,159],$VD=[1,139],$VE=[1,143],$VF=[1,144],$VG=[1,145],$VH=[1,146],$VI=[1,148],$VJ=[1,149],$VK=[2,124],$VL=[1,151],$VM=[1,152],$VN=[1,153],$VO=[1,154],$VP=[1,155],$VQ=[1,156],$VR=[1,157],$VS=[1,158],$VT=[13,23,25,69,95,96,106,107,108,109,110,111,113,114,120,121,122],$VU=[1,172],$VV=[1,173],$VW=[21,41,47,51,121];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"Prog":3,"Prog_repetition0":4,"Query":5,"EOF":6,"QUERY":7,"Query_repetition_plus0":8,"Statement":9,"VAR":10,"=":11,"Operator":12,";":13,"PrefixDecl":14,"PREFIX":15,"PNAME_NS":16,"IRIREF":17,"Operator_group0":18,"SliceOperator":19,"SLICE":20,"(":21,"Source":22,",":23,"SliceCond":24,")":25,"DiceOperator":26,"DICE":27,"BrackettedExpression":28,"RollupOperator":29,"ROLLUP":30,"Dimension":31,"Level":32,"DrilldownOperator":33,"DRILLDOWN":34,"Source_group0":35,"iri":36,"Measure":37,"DimensionCond":38,"MeasureCond":39,"D":40,"M":41,"Expression":42,"Expression_repetition0":43,"ConditionalOrExpression":44,"ConditionalOrExpression_repetition0":45,"ConditionalNotExpression":46,"NOT":47,"RelationalExpression":48,"RelationalExpression_group0":49,"AdditiveExpression":50,"L":51,"RelationalExpression_group1":52,"PrimaryExpression2":53,"MultiplicativeExpression":54,"AdditiveExpression_repetition0":55,"AdditiveExpressionTail":56,"AdditiveExpressionTail_group0":57,"NumericLiteralPositive":58,"AdditiveExpressionTail_repetition0":59,"NumericLiteralNegative":60,"AdditiveExpressionTail_repetition1":61,"UnaryExpression":62,"MultiplicativeExpression_repetition0":63,"MultiplicativeExpressionTail":64,"MultiplicativeExpressionTail_group0":65,"UnaryExpression_option0":66,"PrimaryExpression":67,"!":68,"-":69,"BuiltInCall":70,"FunctionCall":71,"Literal":72,"Aggregate":73,"FUNC_ARITY0":74,"NIL":75,"FUNC_ARITY1":76,"FUNC_ARITY2":77,"IF":78,"BuiltInCall_group0":79,"ExpressionList":80,"BOUND":81,"BNODE":82,"BuiltInCall_option0":83,"EXISTS":84,"GroupGraphPattern":85,"COUNT":86,"Aggregate_option0":87,"Aggregate_group0":88,"FUNC_AGGREGATE":89,"Aggregate_option1":90,"GROUP_CONCAT":91,"Aggregate_option2":92,"Aggregate_option3":93,"String":94,"LANGTAG":95,"^^":96,"INTEGER":97,"DECIMAL":98,"DOUBLE":99,"true":100,"false":101,"STRING_LITERAL1":102,"STRING_LITERAL2":103,"STRING_LITERAL_LONG1":104,"STRING_LITERAL_LONG2":105,"INTEGER_POSITIVE":106,"DECIMAL_POSITIVE":107,"DOUBLE_POSITIVE":108,"INTEGER_NEGATIVE":109,"DECIMAL_NEGATIVE":110,"DOUBLE_NEGATIVE":111,"PNAME_LN":112,"&&":113,"||":114,"!=":115,"<":116,">":117,"<=":118,">=":119,"+":120,"*":121,"/":122,"CONCAT":123,"COALESCE":124,"SUBSTR":125,"REGEX":126,"REPLACE":127,"DISTINCT":128,"SEPARATOR":129,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",7:"QUERY",10:"VAR",11:"=",13:";",15:"PREFIX",16:"PNAME_NS",17:"IRIREF",20:"SLICE",21:"(",23:",",25:")",27:"DICE",30:"ROLLUP",34:"DRILLDOWN",40:"D",41:"M",47:"NOT",51:"L",68:"!",69:"-",71:"FunctionCall",74:"FUNC_ARITY0",75:"NIL",76:"FUNC_ARITY1",77:"FUNC_ARITY2",78:"IF",80:"ExpressionList",81:"BOUND",82:"BNODE",84:"EXISTS",85:"GroupGraphPattern",86:"COUNT",89:"FUNC_AGGREGATE",91:"GROUP_CONCAT",95:"LANGTAG",96:"^^",97:"INTEGER",98:"DECIMAL",99:"DOUBLE",100:"true",101:"false",102:"STRING_LITERAL1",103:"STRING_LITERAL2",104:"STRING_LITERAL_LONG1",105:"STRING_LITERAL_LONG2",106:"INTEGER_POSITIVE",107:"DECIMAL_POSITIVE",108:"DOUBLE_POSITIVE",109:"INTEGER_NEGATIVE",110:"DECIMAL_NEGATIVE",111:"DOUBLE_NEGATIVE",112:"PNAME_LN",113:"&&",114:"||",115:"!=",116:"<",117:">",118:"<=",119:">=",120:"+",121:"*",122:"/",123:"CONCAT",124:"COALESCE",125:"SUBSTR",126:"REGEX",127:"REPLACE",128:"DISTINCT",129:"SEPARATOR"},
productions_: [0,[3,3],[5,2],[9,4],[14,4],[12,1],[19,6],[26,6],[29,8],[33,8],[22,1],[31,1],[32,1],[37,1],[24,1],[24,1],[38,4],[39,4],[42,2],[44,2],[46,2],[46,1],[48,1],[48,6],[48,6],[50,2],[56,2],[56,2],[56,2],[54,2],[64,2],[62,2],[62,2],[62,2],[67,1],[67,1],[67,1],[67,1],[67,1],[67,1],[53,1],[53,1],[28,3],[70,1],[70,2],[70,4],[70,6],[70,8],[70,2],[70,4],[70,2],[70,4],[70,3],[73,5],[73,5],[73,6],[72,1],[72,2],[72,3],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[94,1],[94,1],[94,1],[94,1],[58,1],[58,1],[58,1],[60,1],[60,1],[60,1],[36,1],[36,1],[36,1],[4,0],[4,2],[8,1],[8,2],[18,1],[18,1],[18,1],[18,1],[35,1],[35,1],[43,0],[43,3],[45,0],[45,3],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[55,0],[55,2],[57,1],[57,1],[59,0],[59,2],[61,0],[61,2],[63,0],[63,2],[65,1],[65,1],[66,0],[66,1],[79,1],[79,1],[79,1],[79,1],[79,1],[83,0],[83,1],[87,0],[87,1],[88,1],[88,1],[90,0],[90,1],[92,0],[92,1],[93,0],[93,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

      Parser.prefixes = null;
      return $$[$0-1];
    
break;
case 2:
this.$ = extend({prefixes: Parser.prefixes, query:$$[$0]});
break;
case 3:
this.$ = extend({statement: $$[$0-3]}, $$[$0-1]);
break;
case 4:

      if (!Parser.prefixes) Parser.prefixes = {};
      $$[$0-2] = $$[$0-2].substr(0, $$[$0-2].length - 1);
      $$[$0-1] = resolveIRI($$[$0-1]);
      Parser.prefixes[$$[$0-2]] = $$[$0-1];
    
break;
case 6:
this.$ = extend({ qloperator: 'SLICE'}, $$[$0-3], $$[$0-1]);
break;
case 7:
this.$ = extend({ qloperator: 'DICE', dicecondition: $$[$0-1]}, $$[$0-3]);
break;
case 8:
this.$ = extend({ qloperator: 'ROLLUP'}, $$[$0-5], $$[$0-3], $$[$0-1]);
break;
case 9:
this.$ = extend({ qloperator: 'DRILLDOWN'}, $$[$0-5], $$[$0-3], $$[$0-1]);
break;
case 10:
this.$ = extend({source: $$[$0]});
break;
case 11:
this.$ = extend({dimension: $$[$0]});
break;
case 12:
this.$ = extend({level: $$[$0]});
break;
case 13:
this.$ = extend({measure: $$[$0]});
break;
case 16:
this.$ = extend({condType: 'dimension'},$$[$0-1]);
break;
case 17:
this.$ = extend({condType: 'measure'},$$[$0-1]);
break;
case 18:
this.$ = $$[$0-1].length ? operation('AND', appendTo($$[$0-1], $$[$0])) : $$[$0];
break;
case 19:
this.$ = $$[$0-1].length ? operation('OR', appendTo($$[$0-1], $$[$0])) : $$[$0];
break;
case 20:
this.$ = operation('NOT', $$[$0]);
break;
case 23: case 24:
this.$ = operation($$[$0-1], [$$[$0-3], $$[$0]]);
break;
case 25: case 29:
this.$ = createOperationTree($$[$0-1], $$[$0]);
break;
case 26: case 30:
this.$ = [$$[$0-1], $$[$0]];
break;
case 27:
this.$ = ['+', createOperationTree($$[$0-1], $$[$0])];
break;
case 28:
this.$ = ['-', createOperationTree($$[$0-1].replace('-', ''), $$[$0])];
break;
case 31:
this.$ = $$[$0];
break;
case 32:
this.$ = operation($$[$0-1], [$$[$0]]);
break;
case 33:
this.$ = operation('UMINUS', [$$[$0]]);
break;
case 39:
this.$ = toVar($$[$0]);
break;
case 42:
this.$ = $$[$0-1];
break;
case 44:
this.$ = operation(lowercase($$[$0-1]));
break;
case 45:
this.$ = operation(lowercase($$[$0-3]), [$$[$0-1]]);
break;
case 46:
this.$ = operation(lowercase($$[$0-5]), [$$[$0-3], $$[$0-1]]);
break;
case 47:
this.$ = operation(lowercase($$[$0-7]), [$$[$0-5], $$[$0-3], $$[$0-1]]);
break;
case 48:
this.$ = operation(lowercase($$[$0-1]), $$[$0]);
break;
case 49:
this.$ = operation('bound', [toVar($$[$0-1])]);
break;
case 50:
this.$ = operation($$[$0-1], []);
break;
case 51:
this.$ = operation($$[$0-3], [$$[$0-1]]);
break;
case 52:
this.$ = operation($$[$0-2] ? 'notexists' :'exists', [degroupSingle($$[$0])]);
break;
case 54:
this.$ = expression($$[$0-1], { type: 'aggregate', aggregation: lowercase($$[$0-4]), distinct: !!$$[$0-2], expression: $$[$0-1] });
break;
case 57:
this.$ = $$[$0-1] + lowercase($$[$0]);
break;
case 58:
this.$ = $$[$0-2] + '^^' + $$[$0];
break;
case 59: case 73:
this.$ = createLiteral($$[$0], XSD_INTEGER);
break;
case 60: case 74:
this.$ = createLiteral($$[$0], XSD_DECIMAL);
break;
case 61: case 75:
this.$ = createLiteral(lowercase($$[$0]), XSD_DOUBLE);
break;
case 64:
this.$ = XSD_TRUE;
break;
case 65:
this.$ = XSD_FALSE;
break;
case 66: case 67:
this.$ = unescapeString($$[$0], 1);
break;
case 68: case 69:
this.$ = unescapeString($$[$0], 3);
break;
case 70:
this.$ = createLiteral($$[$0].substr(1), XSD_INTEGER);
break;
case 71:
this.$ = createLiteral($$[$0].substr(1), XSD_DECIMAL);
break;
case 72:
this.$ = createLiteral($$[$0].substr(1).toLowerCase(), XSD_DOUBLE);
break;
case 76:
this.$ = resolveIRI($$[$0]);
break;
case 77:

      var namePos = $$[$0].indexOf(':'),
          prefix = $$[$0].substr(0, namePos),
          expansion = Parser.prefixes[prefix];
      if (!expansion) throw new Error('Unknown prefix: ' + prefix);
      this.$ = resolveIRI(expansion + $$[$0].substr(namePos + 1));
    
break;
case 78:

      $$[$0] = $$[$0].substr(0, $$[$0].length - 1);
      if (!($$[$0] in Parser.prefixes)) throw new Error('Unknown prefix: ' + $$[$0]);
      this.$ = resolveIRI(Parser.prefixes[$$[$0]]);
    
break;
case 79: case 89: case 91: case 105: case 109: case 111: case 113:
this.$ = [];
break;
case 80: case 82: case 106: case 110: case 112: case 114:
$$[$0-1].push($$[$0]);
break;
case 81:
this.$ = [$$[$0]];
break;
case 90: case 92:
$$[$0-2].push($$[$0-1]);
break;
}
},
table: [o($V0,[2,79],{3:1,4:2}),{1:[3]},{5:3,7:[1,5],14:4,15:[1,6]},{6:[1,7]},o($V0,[2,80]),{8:8,9:9,10:$V1},{16:[1,11]},{1:[2,1]},{6:[2,2],9:12,10:$V1},o($V2,[2,81]),{11:[1,13]},{17:[1,14]},o($V2,[2,82]),{12:15,18:16,19:17,20:[1,21],26:18,27:[1,22],29:19,30:[1,23],33:20,34:[1,24]},{13:[1,25]},{13:[1,26]},{13:[2,5]},{13:[2,83]},{13:[2,84]},{13:[2,85]},{13:[2,86]},{21:[1,27]},{21:[1,28]},{21:[1,29]},{21:[1,30]},o($V0,[2,4]),o($V2,[2,3]),{10:$V3,16:$V4,17:$V5,22:31,35:32,36:33,112:$V6},{10:$V3,16:$V4,17:$V5,22:38,35:32,36:33,112:$V6},{10:$V3,16:$V4,17:$V5,22:39,35:32,36:33,112:$V6},{10:$V3,16:$V4,17:$V5,22:40,35:32,36:33,112:$V6},{23:[1,41]},{23:[2,10]},{23:[2,87]},{23:[2,88]},o($V7,[2,76]),o($V7,[2,77]),o($V7,[2,78]),{23:[1,42]},{23:[1,43]},{23:[1,44]},{24:45,38:46,39:47,40:[1,48],41:[1,49]},{21:$V8,28:50},{16:$V4,17:$V5,31:52,36:53,112:$V6},{16:$V4,17:$V5,31:54,36:53,112:$V6},{25:[1,55]},{25:[2,14]},{25:[2,15]},{21:[1,56]},{21:[1,57]},{25:[1,58]},o($V9,$Va,{42:59,43:60}),{23:[1,61]},o([23,25],[2,11]),{23:[1,62]},{13:[2,6]},{16:$V4,17:$V5,31:63,36:53,112:$V6},{16:$V4,17:$V5,36:65,37:64,112:$V6},{13:[2,7]},{25:[1,66]},o($V9,[2,91],{44:67,45:68}),{16:$V4,17:$V5,32:69,36:70,112:$V6},{16:$V4,17:$V5,32:71,36:70,112:$V6},{25:[1,72]},{25:[1,73]},{25:[2,13]},o($V7,[2,42]),o([13,23,25],[2,18],{113:[1,74]}),{21:$V8,28:78,41:$Vb,46:75,47:[1,76],48:77,51:$Vc},{25:[1,81]},{25:[2,12]},{25:[1,82]},{25:[2,16]},{25:[2,17]},o($V9,[2,90]),o([13,23,25,113],[2,19],{114:[1,83]}),{21:$V8,28:78,41:$Vb,48:84,51:$Vc},o($Vd,[2,21]),o($Vd,[2,22]),{21:[1,85]},{21:[1,86]},{13:[2,8]},{13:[2,9]},o($V9,[2,92]),o($Vd,[2,20]),{16:$V4,17:$V5,36:65,37:87,112:$V6},{16:$V4,17:$V5,32:88,36:70,112:$V6},{25:[1,89]},{25:[1,90]},{11:[1,92],49:91,115:[1,93],116:[1,94],117:[1,95],118:[1,96],119:[1,97]},{11:[1,99],52:98,115:[1,100],116:[1,101],117:[1,102],118:[1,103],119:[1,104]},o($Ve,$Vf,{50:105,54:106,62:107,66:108,68:$Vg,69:$Vh,120:$Vi}),o($Vj,[2,93]),o($Vj,[2,94]),o($Vj,[2,95]),o($Vj,[2,96]),o($Vj,[2,97]),o($Vj,[2,98]),{16:$V4,17:$V5,36:113,53:112,58:119,60:120,72:114,94:115,97:$Vk,98:$Vl,99:$Vm,100:$Vn,101:$Vo,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx,111:$Vy,112:$V6},o($Vz,[2,99]),o($Vz,[2,100]),o($Vz,[2,101]),o($Vz,[2,102]),o($Vz,[2,103]),o($Vz,[2,104]),o($Vd,[2,23]),o($VA,[2,105],{55:133}),o($V7,[2,113],{63:134}),{10:$VB,16:$V4,17:$V5,21:$V8,28:136,36:138,47:$VC,58:119,60:120,67:135,70:137,71:$VD,72:140,73:142,74:$VE,76:$VF,77:$VG,78:$VH,79:147,81:$VI,82:$VJ,83:150,84:$VK,86:$VL,89:$VM,91:$VN,94:115,97:$Vk,98:$Vl,99:$Vm,100:$Vn,101:$Vo,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx,111:$Vy,112:$V6,123:$VO,124:$VP,125:$VQ,126:$VR,127:$VS},{10:$VB,16:$V4,17:$V5,21:$V8,28:136,36:138,47:$VC,58:119,60:120,67:160,70:137,71:$VD,72:140,73:142,74:$VE,76:$VF,77:$VG,78:$VH,79:147,81:$VI,82:$VJ,83:150,84:$VK,86:$VL,89:$VM,91:$VN,94:115,97:$Vk,98:$Vl,99:$Vm,100:$Vn,101:$Vo,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx,111:$Vy,112:$V6,123:$VO,124:$VP,125:$VQ,126:$VR,127:$VS},{10:$VB,16:$V4,17:$V5,21:$V8,28:136,36:138,47:$VC,58:119,60:120,67:161,70:137,71:$VD,72:140,73:142,74:$VE,76:$VF,77:$VG,78:$VH,79:147,81:$VI,82:$VJ,83:150,84:$VK,86:$VL,89:$VM,91:$VN,94:115,97:$Vk,98:$Vl,99:$Vm,100:$Vn,101:$Vo,102:$Vp,103:$Vq,104:$Vr,105:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx,111:$Vy,112:$V6,123:$VO,124:$VP,125:$VQ,126:$VR,127:$VS},o($Ve,[2,118]),o($Vd,[2,24]),o($Vd,[2,40]),o($Vd,[2,41]),o($V7,[2,56],{95:[1,162],96:[1,163]}),o($V7,[2,59]),o($V7,[2,60]),o($V7,[2,61]),o($V7,[2,62]),o($V7,[2,63]),o($V7,[2,64]),o($V7,[2,65]),o($VT,[2,66]),o($VT,[2,67]),o($VT,[2,68]),o($VT,[2,69]),o($V7,[2,70]),o($V7,[2,71]),o($V7,[2,72]),o($V7,[2,73]),o($V7,[2,74]),o($V7,[2,75]),o($Vd,[2,25],{56:164,57:165,58:166,60:167,69:[1,169],106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$Vx,111:$Vy,120:[1,168]}),o($VA,[2,29],{64:170,65:171,121:$VU,122:$VV}),o($V7,[2,31]),o($V7,[2,34]),o($V7,[2,35]),o($V7,[2,36]),o($V7,[2,37]),o($V7,[2,38]),o($V7,[2,39]),o($V7,[2,43]),{75:[1,174]},{21:[1,175]},{21:[1,176]},{21:[1,177]},{80:[1,178]},{21:[1,179]},{21:[1,181],75:[1,180]},{84:[1,182]},{21:[1,183]},{21:[1,184]},{21:[1,185]},{80:[2,119]},{80:[2,120]},{80:[2,121]},{80:[2,122]},{80:[2,123]},{84:[2,125]},o($V7,[2,32]),o($V7,[2,33]),o($V7,[2,57]),{16:$V4,17:$V5,36:186,112:$V6},o($VA,[2,106]),o($Ve,$Vf,{62:107,66:108,54:187,68:$Vg,69:$Vh,120:$Vi}),o($V7,[2,109],{59:188}),o($V7,[2,111],{61:189}),o($Vj,[2,107]),o($Vj,[2,108]),o($V7,[2,114]),o($Ve,$Vf,{66:108,62:190,68:$Vg,69:$Vh,120:$Vi}),o($Vj,[2,115]),o($Vj,[2,116]),o($V7,[2,44]),o($V9,$Va,{43:60,42:191}),o($V9,$Va,{43:60,42:192}),o($V9,$Va,{43:60,42:193}),o($V7,[2,48]),{10:[1,194]},o($V7,[2,50]),o($V9,$Va,{43:60,42:195}),{85:[1,196]},o($VW,[2,126],{87:197,128:[1,198]}),o($V9,[2,130],{90:199,128:[1,200]}),o($V9,[2,132],{92:201,128:[1,202]}),o($V7,[2,58]),o($VA,[2,26]),o($VA,[2,27],{65:171,64:203,121:$VU,122:$VV}),o($VA,[2,28],{65:171,64:204,121:$VU,122:$VV}),o($V7,[2,30]),{25:[1,205]},{23:[1,206]},{23:[1,207]},{25:[1,208]},{25:[1,209]},o($V7,[2,52]),o($V9,$Va,{43:60,88:210,42:212,121:[1,211]}),o($VW,[2,127]),o($V9,$Va,{43:60,42:213}),o($V9,[2,131]),o($V9,$Va,{43:60,42:214}),o($V9,[2,133]),o($V7,[2,110]),o($V7,[2,112]),o($V7,[2,45]),o($V9,$Va,{43:60,42:215}),o($V9,$Va,{43:60,42:216}),o($V7,[2,49]),o($V7,[2,51]),{25:[1,217]},{25:[2,128]},{25:[2,129]},{25:[1,218]},{13:[1,220],25:[2,134],93:219},{25:[1,221]},{23:[1,222]},o($V7,[2,53]),o($V7,[2,54]),{25:[1,223]},{129:[1,224]},o($V7,[2,46]),o($V9,$Va,{43:60,42:225}),o($V7,[2,55]),{11:[1,226]},{25:[1,227]},{94:228,102:$Vp,103:$Vq,104:$Vr,105:$Vs},o($V7,[2,47]),{25:[2,135]}],
defaultActions: {7:[2,1],16:[2,5],17:[2,83],18:[2,84],19:[2,85],20:[2,86],32:[2,10],33:[2,87],34:[2,88],46:[2,14],47:[2,15],55:[2,6],58:[2,7],65:[2,13],70:[2,12],72:[2,16],73:[2,17],81:[2,8],82:[2,9],154:[2,119],155:[2,120],156:[2,121],157:[2,122],158:[2,123],159:[2,125],211:[2,128],212:[2,129],228:[2,135]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

  /*
    QL parser in the Jison parser generator format.
    author: Lorena Etcheverry
    creation date: 18/01/2015
    modification date: 23/02/2015
  */

  // Common namespaces and entities
  var RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
      RDF_TYPE  = RDF + 'type',
      RDF_FIRST = RDF + 'first',
      RDF_REST  = RDF + 'rest',
      RDF_NIL   = RDF + 'nil',
      XSD = 'http://www.w3.org/2001/XMLSchema#',
      XSD_INTEGER  = XSD + 'integer',
      XSD_DECIMAL  = XSD + 'decimal',
      XSD_DOUBLE   = XSD + 'double',
      XSD_BOOLEAN  = XSD + 'boolean',
      XSD_TRUE =  '"true"^^'  + XSD_BOOLEAN,
      XSD_FALSE = '"false"^^' + XSD_BOOLEAN;

  var base = '', basePath = '', baseRoot = '';

  // Returns a lowercase version of the given string
  function lowercase(string) {
    return string.toLowerCase();
  }

  // Appends the item to the array and returns the array
  function appendTo(array, item) {
    return array.push(item), array;
  }

  // Appends the items to the array and returns the array
  function appendAllTo(array, items) {
    return array.push.apply(array, items), array;
  }

  // Extends a base object with properties of other objects
  function extend(base) {
    if (!base) base = {};
    for (var i = 1, l = arguments.length, arg; i < l && (arg = arguments[i] || {}); i++)
      for (var name in arg)
        base[name] = arg[name];
    return base;
  }

  // Creates an array that contains all items of the given arrays
  function unionAll() {
    var union = [];
    for (var i = 0, l = arguments.length; i < l; i++)
      union = union.concat.apply(union, arguments[i]);
    return union;
  }

  // Resolves an IRI against a base path
  function resolveIRI(iri) {
    // Strip off possible angular brackets
    if (iri[0] === '<')
      iri = iri.substring(1, iri.length - 1);
    switch (iri[0]) {
    // An empty relative IRI indicates the base IRI
    case undefined:
      return base;
    // Resolve relative fragment IRIs against the base IRI
    case '#':
      return base + iri;
    // Resolve relative query string IRIs by replacing the query string
    case '?':
      return base.replace(/(?:\?.*)?$/, iri);
    // Resolve root relative IRIs at the root of the base IRI
    case '/':
      return baseRoot + iri;
    // Resolve all other IRIs at the base IRI's path
    default:
      return /^[a-z]+:/.test(iri) ? iri : basePath + iri;
    }
  }

  // If the item is a variable, ensures it starts with a question mark
  function toVar(variable) {
    if (variable) {
      var first = variable[0];
      if (first === '?') return variable;
      if (first === '$') return '?' + variable.substr(1);
    }
    return variable;
  }

  // Creates an operation with the given name and arguments
  function operation(operatorName, args) {
    return { type: 'operation', operator: operatorName, args: args || [] };
  }

  // Creates an expression with the given type and attributes
  function expression(expr, attr) {
    var expression = { expression: expr };
    if (attr)
      for (var a in attr)
        expression[a] = attr[a];
    return expression;
  }

  // Creates a path with the given type and items
  function path(type, items) {
    return { type: 'path', pathType: type, items: items };
  }

  // Transforms a list of operations types and arguments into a tree of operations
  function createOperationTree(initialExpression, operationList) {
    for (var i = 0, l = operationList.length, item; i < l && (item = operationList[i]); i++)
      initialExpression = operation(item[0], [initialExpression, item[1]]);
    return initialExpression;
  }

 
  // Converts the number to a string
  function toInt(string) {
    return parseInt(string, 10);
  }

 
  // Creates a literal with the given value and type
  function createLiteral(value, type) {
    return '"' + value + '"^^' + type;
  }

  // Creates a triple with the given subject, predicate, and object
  function triple(subject, predicate, object) {
    var triple = {};
    if (subject   != null) triple.subject   = subject;
    if (predicate != null) triple.predicate = predicate;
    if (object    != null) triple.object    = object;
    return triple;
  }

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true,"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* ignore */
break;
case 1:return 15
break;
case 2:return 21
break;
case 3:return 25
break;
case 4:return '{'
break;
case 5:return '}'
break;
case 6:return 13
break;
case 7:return 23
break;
case 8:return 120
break;
case 9:return 68
break;
case 10:return 114
break;
case 11:return 113
break;
case 12:return 11
break;
case 13:return 115
break;
case 14:return 116
break;
case 15:return 117
break;
case 16:return 118
break;
case 17:return 119
break;
case 18:return 69
break;
case 19:return 7 
break;
case 20:return 20
break;
case 21:return 27
break;
case 22:return 30
break;
case 23:return 34
break;
case 24:return 47 
break;
case 25:return 40 
break;
case 26:return 41 
break;
case 27:return 51
break;
case 28:return 74
break;
case 29:return 76
break;
case 30:return 77
break;
case 31:return 100
break;
case 32:return 101
break;
case 33:return 17
break;
case 34:return 16
break;
case 35:return 112
break;
case 36:return 'BLANK_NODE_LABEL'
break;
case 37:return 10
break;
case 38:return 95
break;
case 39:return 97
break;
case 40:return 98
break;
case 41:return 99
break;
case 42:return 106
break;
case 43:return 107
break;
case 44:return 108
break;
case 45:return 109
break;
case 46:return 110
break;
case 47:return 111
break;
case 48:return 'EXPONENT'
break;
case 49:return 102
break;
case 50:return 103
break;
case 51:return 104
break;
case 52:return 105
break;
case 53:return 75
break;
case 54:return 'ANON'
break;
case 55:return 6
break;
case 56:return 'INVALID'
break;
case 57:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:\s+|#[^\n\r]*)/i,/^(?:PREFIX)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:;)/i,/^(?:,)/i,/^(?:\+)/i,/^(?:!)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:-)/i,/^(?:QUERY)/i,/^(?:SLICE)/i,/^(?:DICE)/i,/^(?:ROLLUP)/i,/^(?:DRILLDOWN)/i,/^(?:NOT)/i,/^(?:D)/i,/^(?:M)/i,/^(?:L)/i,/^(?:(RAND|NOW|UUID|STUUID))/i,/^(?:(STR|LANG|DATATYPE|IRI|URI|ABS|CEIL|FLOOR|ROUND|STRLEN|UCASE|LCASE|ENCODE_FOR_URI|YEAR|MONTH|DAY|HOURS|MINUTES|SECONDS|TIMEZONE|TZ|MD5|SHA1|SHA256|SHA384|SHA512|isIRI|isURI|isBLANK|isLITERAL|isNUMERIC))/i,/^(?:(LANGMATCHES|CONTAINS|STRSTARTS|STRENDS|STRBEFORE|STRAFTER|STRLANG|STRDT|sameTerm))/i,/^(?:true)/i,/^(?:false)/i,/^(?:(<([^<>\"\{\}\|\^`\\\u0000-\u0020])*>))/i,/^(?:((([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])(((((?:([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F]|[\u203F-\u2040])|\.)*(((?:([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F]|[\u203F-\u2040]))?)?:))/i,/^(?:(((([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])(((((?:([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F]|[\u203F-\u2040])|\.)*(((?:([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F]|[\u203F-\u2040]))?)?:)((((?:([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|:|[0-9]|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))(((((?:([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F]|[\u203F-\u2040])|\.|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))*((((?:([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F]|[\u203F-\u2040])|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%)))))?)))/i,/^(?:(_:(((?:([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|[0-9])(((((?:([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F]|[\u203F-\u2040])|\.)*(((?:([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F]|[\u203F-\u2040]))?))/i,/^(?:(\$((((?:([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|[0-9])(((?:([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|[0-9]|\u00B7|[\u0300-\u036F]|[\u203F-\u2040])*)))/i,/^(?:(@[a-zA-Z]+(-[a-zA-Z0-9]+)*))/i,/^(?:([0-9]+))/i,/^(?:([0-9]*\.[0-9]+))/i,/^(?:([0-9]+\.[0-9]*([eE][+-]?[0-9]+)|\.([0-9])+([eE][+-]?[0-9]+)|([0-9])+([eE][+-]?[0-9]+)))/i,/^(?:(\+([0-9]+)))/i,/^(?:(\+([0-9]*\.[0-9]+)))/i,/^(?:(\+([0-9]+\.[0-9]*([eE][+-]?[0-9]+)|\.([0-9])+([eE][+-]?[0-9]+)|([0-9])+([eE][+-]?[0-9]+))))/i,/^(?:(-([0-9]+)))/i,/^(?:(-([0-9]*\.[0-9]+)))/i,/^(?:(-([0-9]+\.[0-9]*([eE][+-]?[0-9]+)|\.([0-9])+([eE][+-]?[0-9]+)|([0-9])+([eE][+-]?[0-9]+))))/i,/^(?:([eE][+-]?[0-9]+))/i,/^(?:('(([^\u0027\u005C\u000A\u000D])|(\\[tbnrf\\\"']|\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*'))/i,/^(?:("(([^\u0022\u005C\u000A\u000D])|(\\[tbnrf\\\"']|\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*"))/i,/^(?:('''(('|'')?([^'\\]|(\\[tbnrf\\\"']|\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))))*'''))/i,/^(?:("""(("|"")?([^\"\\]|(\\[tbnrf\\\"']|\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))))*"""))/i,/^(?:(\((\u0020|\u0009|\u000D|\u000A)*\)))/i,/^(?:(\[(\u0020|\u0009|\u000D|\u000A)*\]))/i,/^(?:$)/i,/^(?:.)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
}).call(this,require('_process'))
},{"_process":4,"fs":2,"path":3}],2:[function(require,module,exports){

},{}],3:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
var splitPathRe =
    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var splitPath = function(filename) {
  return splitPathRe.exec(filename).slice(1);
};

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function(path) {
  var result = splitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
};


exports.basename = function(path, ext) {
  var f = splitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};


exports.extname = function(path) {
  return splitPath(path)[3];
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

}).call(this,require('_process'))
},{"_process":4}],4:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};
var queue = [];
var draining = false;

function drainQueue() {
    if (draining) {
        return;
    }
    draining = true;
    var currentQueue;
    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        var i = -1;
        while (++i < len) {
            currentQueue[i]();
        }
        len = queue.length;
    }
    draining = false;
}
process.nextTick = function (fun) {
    queue.push(fun);
    if (!draining) {
        setTimeout(drainQueue, 0);
    }
};

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}]},{},[1])(1)
});